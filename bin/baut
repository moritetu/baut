#!/usr/bin/env bash
set -eu

HERE="$(cd -P -- $(dirname -- "${BASH_SOURCE:-$0}") && pwd -P)"

export BAUT_ROOT="$(dirname "$HERE")"
export BAUT_LIBEXEC="$BAUT_ROOT/libexec"
export BAUT_LOG_LEVEL="${BAUT_LOG_LEVEL:-2}"
export PATH="$BAUT_LIBEXEC":"$BAUT_ROOT/bin":"$PATH"
source "$BAUT_LIBEXEC/baut--load"

# Check whether the specified command is valid.
baut_exec_command() {
  local command_name="$1"
  baut_exec_command_name="baut-exec-${command_name}"
  exec_command="$(command -v "${baut_exec_command_name}" ||:)"
  [ -z "$exec_command" ] && abort "error: invalid command: $command_name"
  echo $exec_command
}

while [ $# -gt 0 ]; do
  COMMAND="$1"
  case "$COMMAND" in
    -v | --version ) baut-version && exit ;;
    -h | --help )    baut-help && exit    ;;
    --d[0-4])
      export BAUT_LOG_LEVEL="${1:3:1}"
      ;;
    *)
      # Resolve command alias
      case "$COMMAND" in
        r) COMMAND=run ;;
        c) COMMAND=compile ;;
        i) COMMAND=init ;;
        t) COMMAND=test ;;
        p) COMMAND=report ;;
      esac

      # If the command equals "help", show usage of the command.
      # baut help <command>
      if [ "$COMMAND" = "help" ]; then
        shift
        [ -z "${1:-}" ] && baut-help && exit
        if [ ! -f "$1" ]; then
            abort "not found: $1"
        fi
        get_comment_block "$1" "HELP"
        exit
      fi

      # If the command equals "config", show basic configuration of baut.
      if [ "$COMMAND" = "config" ]; then
        baut-config show
        exit
      fi

      exec_command="$(baut_exec_command "$COMMAND")"
      shift
      case "${1:-}" in
        -h | --help )
          get_comment_block "$exec_command" "HELP"
          exit
          ;;
        *)
          # Execute a command.
          export BAUT_EXEC_COMMAND="$COMMAND"
          exec "$exec_command" "$@"
      esac
  esac
  shift
done

# No argument, show usage and abort.
baut-help -p | abort
