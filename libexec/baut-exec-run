#!/usr/bin/env bash

set -eu

source "$BAUT_LIBEXEC"/baut--load

# Command line options
declare -A options
options=(
  [recursively]=0
  [stopOnError]=0
  [dryRun]=0
  [noCheckSum]=0
  [noColor]=0
  [format]="default"
  [noDebug]=0
  [functionMatch]=
  [interactiveMode]=0
)

# Not options arguments
arguments=()
# Test target files
test_targets=()
# Compiled baut files
baut_files=()

# Test time
test_begin_time_sec=0
test_end_time_sec=0

# Test total count
test_total_count=0


#: parse_options [arg ...]
#:   Parse command line options.
#:
parse_options() {
  while [ $# -gt 0 ]; do
    case "$1" in
      -r | --recursively)    options[recursively]=1    ;;
      -s | --stop-on-error)  options[stopOnError]=1    ;;
      -d | --dry-run)        options[dryRun]=1         ;;
      --no-checksum)         options[noCheckSum]=1     ;;
      --no-color)            options[noColor]=1        ;;
      --no-debug)            options[noDebug]=1        ;;
      -i | --interactive)    options[interactiveMode]=1 ;;
      -f | --format)
        shift
        loadable "baut--test-report-${1-}" || abort "error: $(self): invalid format: ${1:-}"
        options[format]="$1"
        ;;
      -m | --match)
        shift
        options[functionMatch]="$1"
        ;;
      -*)
        abort "error: $(self): invalid option: $1"
        ;;
      *)
        arguments[${#arguments[@]}]="$1"
        ;;
    esac
    shift
  done
}

#: find_test_targets <file or directory> [<file or directory> ...]
#:   Find test targets with the specified files and directories.
#:
find_test_targets() {
  local arg
  log_trace "==> find test targets"
  local file_regex="^${BAUT_TEST_FILE_PREFIX}.*\.sh$"
  for arg in "${arguments[@]}"; do
    if [ -d "$arg" ]; then
      shopt -s nullglob
      if [ ${options[recursively]} -eq 0 ]; then
        for target in "$arg"/"${BAUT_TEST_FILE_PREFIX}"*.sh; do
          test_targets[${#test_targets[@]}]="$(resolve_link "$target")"
        done
      else
        for target in $(find "$arg" -name "${BAUT_TEST_FILE_PREFIX}*.sh" -type f); do
          test_targets[${#test_targets[@]}]="$(resolve_link "$target")"
        done
      fi
      shopt -u nullglob
    else
      if [ ! -e "$arg" ]; then
        abort "error: $(self): file does not exist: $arg"
      fi
      local filename="$(basename "$arg")"
      if [[ "$filename" =~ $file_regex ]]; then
        test_targets[${#test_targets[@]}]="$(resolve_link "$arg")"
      else
        abort "error: $(self): test file is invalid: $arg"
      fi
    fi
  done
  log_trace "test targets(${#test_targets[@]}): ${test_targets[@]:-}"
}

#: compile_and_count_number_of_tests
#:   Compile test target files and count tests.
#:
compile_and_count_number_of_tests() {
  local test_file file_ident compiled_filepath
  local line=
  local test_count=0
  local i=1
  log_trace "==> compile"
  for test_file in "${test_targets[@]}"; do
    file_ident="$(echo "$test_file" | "$baut_hash" | awk -F" " '{print $1'})"
    compiled_filepath="$BAUT_TMPDIR/${file_ident}.baut"
    log_trace "$i: $test_file => $compiled_filepath"
    baut-exec-compile "$test_file" > "$compiled_filepath"
    baut_files[${#baut_files[@]}]="$compiled_filepath"
    while IFS= read -r line; do
      if [[ $line =~ @testcount=([[:digit:]]+) ]]; then
        test_count="${BASH_REMATCH[1]}"
        break
      fi
    done < <(sed -n "/^#:@/p" "$compiled_filepath")
    (( test_total_count+=$test_count ))
    log_trace "$i: test_count=$test_count"
    let i+=1
  done
  log_trace "1-$((i-1)): test_total_count=$test_total_count"
}

#: baut_perform_test_suite
#:   Perform a test suite.
#:
baut_perform_test_suite() {
  local baut_file line
  local status=0

  load "baut--test-report" "reporter"
  baut_report_code_begin_all "${#baut_files[@]}" "$test_total_count"

  test_begin_time_sec="$(date +'%s')"
  for baut_file in "${baut_files[@]}"; do
    log_trace "==> execute tests: $baut_file"
    baut-exec-test $(build_test_options) "$baut_file" || status=$?
    if [ $status -ne 0 ] && [ ${options[stopOnError]} -eq 1 ]; then
      # A code for halt is sent in 'baut-exec-test'.
      break
    fi
  done
  test_end_time_sec="$(date +'%s')"
  print_test_time
  return "$status"
} 2>&1


#: interactive_loop
#:   Run in interactive execution mode.
#:
interactive_loop() {
  local test_file test_func
  local file_no test_no
  local arg1 arg2
  local status
  local list_file_no=
  local rerun=
  declare -A function_table=[]
  declare -A file_table=[]
  local run_options=""
  [ ${options[noColor]} -eq 1 ] && run_options+="--no-color "
  [ ${options[noDebug]} -eq 1 ] && run_options+="--no-debug "
  run_options+="--no-checksum "
  run_options+="--format ${options[format]}"

  disable_setopt "e"
  while true; do
    file_no=0
    test_no=0
    for test_file in ${test_targets[@]}; do
      if [ -z "$list_file_no" ] || [ "$file_no" = "$list_file_no" ]; then
        print_with_color "$(printf "#%-2d %s\n" "$file_no" "$test_file")\n" "" "" 1
      fi
      local test_functions=( $(baut-exec-compile --show-functions "$test_file" | grep ^test_functions) )
      unset test_functions[0]
      for test_func in ${test_functions[@]}; do
        if [ -z "$list_file_no" ] || [ "$file_no" = "$list_file_no" ]; then
          printf "%3d) %s\n" "$test_no" "$test_func"
        fi
        function_table["$test_no"]="$test_func"
        file_table["$test_no"]="$test_file"
        ((test_no+=1))
      done
      ((file_no+=1))
    done
    printf "\n"

    while true; do
      local skip=0
      local interval=0
      local __interupted=0
      local repeated_count=0
      local prompt="# which tests do you run ? (q:quit|r:rerun|w:watch|l:list|h:help)\n"
      prompt+="No(sep:,): "
      while true; do
        read -p "$(printf "%b" "$prompt")" -e -r arg1 arg2
        # We may get Ctrl-D input
        if [ $? -ne 0 ]; then
          echo "quit"
          exit 0
        fi

        case $arg1 in
          "q")
            exit 0
            ;;
          "l"|"list")
            list_file_no="${arg2}"
            break 2
            ;;
          "r"|"w")
            if [ -z "$rerun" ]; then
              echo "warning: a command executed previously was not found"
              skip=1
              break
            fi
            if [[ "$arg2" =~ ^[[:digit:]]+$ ]]; then
              interval="${BASH_REMATCH[0]}"
              log_trace "watch interval: $interval"
            fi
            break
            ;;
          "h"|"?")
            echo "Command:"
            echo "  q(quit)                Exit loop."
            echo "  r(rerun)               Rerun previous tests."
            echo "  w(watch) [<interval>]  Run testsa repeatedly every <interval> seconds (Default: 0)."
            echo "  l(list) [<file_no>]    Show test functions."
            echo "                         If <file_no> is specified, show only test functions in <file_no>."
            echo ""
            skip=1
            break
            ;;
          *)
            if [[ "$arg1" =~ ^[[:digit:]]([[:digit:],])*$ ]]; then
              break
            elif [ ${#arg1} -ne 0 ]; then
              echo "error: invalid command"
            fi
            skip=1
            break
            ;;
        esac
      done

      [ -z "$arg1" -o $skip -eq 1 ] && continue

      if [ "$arg1" = "r" ] && [ -n "$rerun" ]; then
        for t in ${rerun[@]}; do
          print_with_color "==> Rerun: $t) ${function_table[$t]}\n" "" "" 1
          baut-exec-run -m "^${function_table[$t]}\$" $run_options "${file_table[$t]}" || status=$?
        done
      elif [ "$arg1" = "w" ] && [ -n "$rerun" ]; then
        trap '{ __interupted=1; break; }' SIGINT
        while true; do
          ((repeated_count+=1))
          print_with_color "==> #$repeated_count $(date) (every ${interval}s)\n" "" "" 1
          for t in ${rerun[@]}; do
            baut-exec-run -m "^${function_table[$t]}\$" $run_options "${file_table[$t]}" || status=$?
            printf "\n"
          done
          [ $__interupted -eq 1 ] && break
          sleep $interval
        done
        trap 'echo "quit"; exit 0;' SIGINT
      else
        rerun=()
        local t
        log_trace "Run: $arg1" | tr -s "," ' '
        for t in $(echo "$arg1" | tr -s "," ' '); do
          if [ $t -ge $test_no ]; then
            print_with_color "warning: skip $t for invalid number\n" 3 "" 1
            continue
          fi
          rerun[${#rerun[@]}]="$t"
        done

        for t in ${rerun[@]}; do
          print_with_color "==> Run: $t) ${function_table[$t]}\n" "" "" 1
          baut-exec-run -m "^${function_table[$t]}\$" $run_options "${file_table[$t]}" || status=$?
        done
      fi
      printf "\n"
    done
  done
}

#: print_with_color
#:   Print text with color If noColor option is enabled.
#:
print_with_color() {
  if [ ${options[noColor]} -ne 1 ]; then
    text_color "$@"
    return
  fi
  printf "%b" "$1"
}


#: baut_cleanup_test_suite
#:   Clean up the current test suite.
#:
baut_cleanup_test_suite() {
  /bin/rm -rf "${baut_files[@]}" ||:
}

#: dry_run
#:   Show test functions, DO NOT run tests.
#:
dry_run() {
  local i=1
  local line fields label funcs test_file
  local file_num="${#test_targets[@]}"
  local test_num=0
  for test_file in "${test_targets[@]}"; do
    printf "[%d] %s\n" "$i" "$test_file"
    while IFS= read -r line; do
      fields=($line)
      label="${fields[0]}"
      funcs=(${fields[@]:1})
      if [[ "$label" =~ after_all ]]; then
        printf " └─ "
      else
        printf " ├─ "
      fi
      printf " (%d) %s => %s\n" "${#funcs[@]}" "$label" "${funcs[*]:-}"
      if [ "$label" = "test_functions" ]; then
        ((test_num+=${#funcs[@]}))
      fi
    done < <(baut-exec-compile --show-functions "$test_file")
    ((i+=1))
  done
  printf "\n"
  printf "%s" "$(plural "%d file" "$file_num")"
  printf ", %s\n" "$(plural "%d test" "$test_num")"
}

#: print_test_time
#:   Print test time.
#:
print_test_time() {
  local test_total_time_sec=$((test_end_time_sec - test_begin_time_sec))
  local hours=0 minutes=0 seconds=0
  if [ $test_total_time_sec -ge 3600 ]; then
    hours=$((test_total_time_sec / 3600))
    test_total_time_sec=$((test_total_time_sec - 3600 * hours))
  fi
  if [ $test_total_time_sec -ge 60 ]; then
    minutes=$((test_total_time_sec / 60))
    test_total_time_sec=$((test_total_time_sec - 60 * minutes))
  fi
  seconds="$test_total_time_sec"

  plural "#:TIME;%d hour" "$hours"
  plural ", %d minute" "$minutes"
  plural ", %d second" "$seconds"
  printf "\n"
}

#: build_report_options
#:   Build options passed to the receiver.
#:
build_report_options() {
  local opts=""
  if [ "${options[noColor]}" = "1" ]; then
    opts+="--no-color"
  fi
  opts+=" --format ${options[format]}"
  echo "$opts"
}

#: build_test_options
#:   Build options passed to the baut-exec-test.
#:
build_test_options() {
  local opts=""
  if [ "${options[noCheckSum]}" = "1" ]; then
    opts+=" --no-checksum"
  fi
  if [ "${options[stopOnError]}" = "1" ]; then
    opts+=" --stop-on-error"
  fi
  if [ "${options[noDebug]}" = "1" ]; then
    opts+=" --no-debug"
  fi
  if [ ! -z "${options[functionMatch]:-}" ]; then
    opts+=" -m ${options[functionMatch]}"
  fi

  opts+=" --remove-at-end"
  echo "$opts"
}

parse_options "$@"

# required test-suite
if [ ${#arguments[@]} -eq 0 ]; then
  abort "error: $(self): file is not specified: baut run <file|directory> ..."
fi

# If the directory for compilation does not exist, we make it.
[ ! -e "$BAUT_TMPDIR" ] && mkdir -p "$BAUT_TMPDIR"

find_test_targets
if [ ${#test_targets[@]} -eq 0 ]; then
  echo "Nothing to do"
  exit
fi

if [ ${options[dryRun]} -eq 1 ]; then
  dry_run
  exit
fi

add_trap_callback "EXIT" "baut_cleanup_test_suite"

if [ ${options[interactiveMode]} -eq 1 ]; then
  interactive_loop
else
  compile_and_count_number_of_tests
  set -o pipefail
  baut_perform_test_suite | require "baut--test-report" "receiver" $(build_report_options)
fi


#=begin COMMAND
#
# run        Run tests.
#
#=end COMMAND

#=begin HELP
#
# Usage: baut run [-r|--recursively] [-s|--stop-on-error] [-d|--dry-run] [--no-debug]
#                 [--no-color] [--no-checksum] [--format [default|oneline|tap|cat]]
#                 [-m | --match <regex>] <test> [<test> ...]
#
# Run tests with the specified test files or directories.
#
# OPTIONS
#   -r, --recursively
#     If the specified <test> is directory, baut finds test scripts under the directory recursively.
#
#   -s, --stop-on-error
#     If a test failed in running, baut halts.
#
#   -d, --dry-run
#     DOES NOT run tests, show information tests being executed.
#
#   --no-debug
#     Disable trap DEBUG in doing tests.
#
#   --no-color
#     Set coloring of output off.
#
#   --no-checksum
#     Skip validation of checksum.
#
#   -f, --format [oneline|default|tap|cat]
#     Specify the output format. 'oneline' is a simple output format, only the result and the test name are
#     displayed in a line. 'cat' is only for debug and it does not format output.
#     'tap' is Test Anything Protocol format.
#
#   -m, --match <regex>
#     Execute only functions that match <regex>.
#     ex: -m "options"
#
#
#=end HELP
