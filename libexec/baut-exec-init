#!/usr/bin/env bash

source "$BAUT_LIBEXEC"/baut--load
enable_setopt "euET"

trap 'abort "error: $(self): failed to copy"' ERR

template=
declare -A variables=()
declare -A options=(
  [force]=0
  [showTemplate]=0
)

#: init_project
#:   Copies a template to the specified output directory.
#:
init_project() {
  local file
  log_trace "==> copy '$template' to '$outdir'"
  mkdir -p "$outdir"
  if [ -n "$(ls "$outdir"/* 2>/dev/null)" ]; then
    if [ ${options[force]} -ne 1 ]; then
      abort "error: $(self): files already exist: '$outdir', to overwrite files, use '-f' option."
    fi
  fi
  /bin/cp -rf "$template"/* "$outdir/"
  for file in $(find "$outdir" -type f); do
    log_trace "replace place holders: $file"
    local bak_file="$file.bak"
    sed -e "1,$ {
      $(make_replace_strings_rule)
    }" "$file" > "$bak_file"
    mv -f "$bak_file" "$file"
    [[ "$file" =~ .*\.sh ]] && chmod +x "$file"
  done
}

#: make_replace_strings_rule
#:   Prints rules that 'sed' takes.
#:
make_replace_strings_rule() {
  local key
  for key in "${!variables[@]}"; do
    printf "%s\n" "s|%${key}%|${variables[$key]}|g"
  done
}

#: show_templates
#:   Print available templates.
#:
show_templates() {
  local tmpl
  if [ -z "$template" ]; then
    echo "[Available Templates]"
    for tmpl in $(find "$BAUT_ROOT/templates" -mindepth 1 -maxdepth 1 -type d); do
      printf " %s\n"  "$(basename "$tmpl")"
    done
  else
    printf "[Template %s] ~ %b\n" "$(basename "$template")" "$(text_color "$template" 0 "" 1)"
    printf "\n"
    if [ -e "$template/README" ]; then
      cat "$template/README"
    else
      if type trees &> /dev/null ; then
        tree "$template"
      else
        local fnum= dnum=0
        basename "$template"
        for tmpl in $(find "$template" -mindepth 1); do
          if [ -d "$tmpl" ]; then
            printf " d %s\n"  "$(basename "$tmpl")"
            let dnum+=1
          else
            printf " f %s\n"  "$(basename "$tmpl")"
            let fnum+=1
          fi
        done
        printf "\n"
        printf "$fnum files, $dnum directories\n"
      fi
    fi
  fi
  printf "\n"
}

# Parse command line options.
while [ $# -gt 0 ]; do
  case "$1" in
    -t | --template)
      shift
      [ -z "${1:-}" ] && abort "error: $(self): template is not specified: -t <template>"
      if [ "${1:0:1}" != "/" ]; then
        template="$BAUT_ROOT/templates/$1"
      else
        template="$1"
      fi
      ;;
    -D*)
      arg="${1:2}"
      d_name="${arg%%=*}"
      d_value="${arg/${d_name}=/}"
      variables["$d_name"]="$d_value"
      ;;
    -f)
      options[force]=1
      ;;
    -i)
      options[showTemplate]=1
      ;;
    -*)
      abort "error: $(self): invalid option: $1"
      ;;
    *)
      break
      ;;
  esac
  shift
done

outdir="${1:-.}"

if [ ! -e "$outdir" ]; then
  mkdir -p "$outdir"
fi

if [ ${options[showTemplate]} -eq 1 ]; then
  show_templates
else
  # use default template
  if [ -z "$template" ]; then
    template="$BAUT_ROOT/templates/default"
  fi

  if [ ! -e "$template" ]; then
    abort "error: $(self): template not found: $template"
  fi

  init_project
fi

exit $?

#=begin COMMAND
#
# init       Generates test files from a template.
#
#=end COMMAND

#=begin HELP
#
# Usage: baut init [-t <template>] [-f] [-i] <outdir>
#
# Generates test files from a template. 'init' just copies files or directories
# with the specified template.
#
# OPTIONS
#   -t, --template <template>
#     Copies from a specified template.
#
#   -i
#     Shows available templates.
#
#   -f
#     Overwrites.
#
#   -DVARNAME=VALUE
#     Passes the specified variables to place holders.
#
#
#=end HELP
